<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: validator.proto

namespace Validator;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>validator.FieldValidator</code>
 */
class FieldValidator extends \Google\Protobuf\Internal\Message
{
    /**
     * Uses a Golang RE2-syntax regex to match the field contents.
     *
     * Generated from protobuf field <code>optional string regex = 1 [json_name = "regex"];</code>
     */
    protected $regex = null;
    /**
     * Field value of integer strictly greater than this value.
     *
     * Generated from protobuf field <code>optional int64 int_gt = 2 [json_name = "intGt"];</code>
     */
    protected $int_gt = null;
    /**
     * Field value of integer strictly smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 int_lt = 3 [json_name = "intLt"];</code>
     */
    protected $int_lt = null;
    /**
     * Used for nested message types, requires that the message type exists.
     *
     * Generated from protobuf field <code>optional bool msg_exists = 4 [json_name = "msgExists"];</code>
     */
    protected $msg_exists = null;
    /**
     * Human error specifies a user-customizable error that is visible to the user.
     *
     * Generated from protobuf field <code>optional string human_error = 5 [json_name = "humanError"];</code>
     */
    protected $human_error = null;
    /**
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_gt = 6 [json_name = "floatGt"];</code>
     */
    protected $float_gt = null;
    /**
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_lt = 7 [json_name = "floatLt"];</code>
     */
    protected $float_lt = null;
    /**
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     *
     * Generated from protobuf field <code>optional double float_epsilon = 8 [json_name = "floatEpsilon"];</code>
     */
    protected $float_epsilon = null;
    /**
     * Floating-point value compared to which the field content should be greater or equal.
     *
     * Generated from protobuf field <code>optional double float_gte = 9 [json_name = "floatGte"];</code>
     */
    protected $float_gte = null;
    /**
     * Floating-point value compared to which the field content should be smaller or equal.
     *
     * Generated from protobuf field <code>optional double float_lte = 10 [json_name = "floatLte"];</code>
     */
    protected $float_lte = null;
    /**
     * Used for string fields, requires the string to be not empty (i.e different from "").
     *
     * Generated from protobuf field <code>optional bool string_not_empty = 11 [json_name = "stringNotEmpty"];</code>
     */
    protected $string_not_empty = null;
    /**
     * Repeated field with at least this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_min = 12 [json_name = "repeatedCountMin"];</code>
     */
    protected $repeated_count_min = null;
    /**
     * Repeated field with at most this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_max = 13 [json_name = "repeatedCountMax"];</code>
     */
    protected $repeated_count_max = null;
    /**
     * Field value of length greater than this value.
     *
     * Generated from protobuf field <code>optional int64 length_gt = 14 [json_name = "lengthGt"];</code>
     */
    protected $length_gt = null;
    /**
     * Field value of length smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 length_lt = 15 [json_name = "lengthLt"];</code>
     */
    protected $length_lt = null;
    /**
     * Field value of length strictly equal to this value.
     *
     * Generated from protobuf field <code>optional int64 length_eq = 16 [json_name = "lengthEq"];</code>
     */
    protected $length_eq = null;
    /**
     * Requires that the value is in the enum.
     *
     * Generated from protobuf field <code>optional bool is_in_enum = 17 [json_name = "isInEnum"];</code>
     */
    protected $is_in_enum = null;
    /**
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     *
     * Generated from protobuf field <code>optional int32 uuid_ver = 18 [json_name = "uuidVer"];</code>
     */
    protected $uuid_ver = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $regex
     *           Uses a Golang RE2-syntax regex to match the field contents.
     *     @type int|string $int_gt
     *           Field value of integer strictly greater than this value.
     *     @type int|string $int_lt
     *           Field value of integer strictly smaller than this value.
     *     @type bool $msg_exists
     *           Used for nested message types, requires that the message type exists.
     *     @type string $human_error
     *           Human error specifies a user-customizable error that is visible to the user.
     *     @type float $float_gt
     *           Field value of double strictly greater than this value.
     *           Note that this value can only take on a valid floating point
     *           value. Use together with float_epsilon if you need something more specific.
     *     @type float $float_lt
     *           Field value of double strictly smaller than this value.
     *           Note that this value can only take on a valid floating point
     *           value. Use together with float_epsilon if you need something more specific.
     *     @type float $float_epsilon
     *           Field value of double describing the epsilon within which
     *           any comparison should be considered to be true. For example,
     *           when using float_gt = 0.35, using a float_epsilon of 0.05
     *           would mean that any value above 0.30 is acceptable. It can be
     *           thought of as a {float_value_condition} +- {float_epsilon}.
     *           If unset, no correction for floating point inaccuracies in
     *           comparisons will be attempted.
     *     @type float $float_gte
     *           Floating-point value compared to which the field content should be greater or equal.
     *     @type float $float_lte
     *           Floating-point value compared to which the field content should be smaller or equal.
     *     @type bool $string_not_empty
     *           Used for string fields, requires the string to be not empty (i.e different from "").
     *     @type int|string $repeated_count_min
     *           Repeated field with at least this number of elements.
     *     @type int|string $repeated_count_max
     *           Repeated field with at most this number of elements.
     *     @type int|string $length_gt
     *           Field value of length greater than this value.
     *     @type int|string $length_lt
     *           Field value of length smaller than this value.
     *     @type int|string $length_eq
     *           Field value of length strictly equal to this value.
     *     @type bool $is_in_enum
     *           Requires that the value is in the enum.
     *     @type int $uuid_ver
     *           Ensures that a string value is in UUID format.
     *           uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     *           If uuid_ver is 0 all UUID versions are accepted.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\GithubCom\Mwitkow\GoProtoValidators\Validator::initOnce();
        parent::__construct($data);
    }

    /**
     * Uses a Golang RE2-syntax regex to match the field contents.
     *
     * Generated from protobuf field <code>optional string regex = 1 [json_name = "regex"];</code>
     * @return string
     */
    public function getRegex()
    {
        return isset($this->regex) ? $this->regex : '';
    }

    public function hasRegex()
    {
        return isset($this->regex);
    }

    public function clearRegex()
    {
        unset($this->regex);
    }

    /**
     * Uses a Golang RE2-syntax regex to match the field contents.
     *
     * Generated from protobuf field <code>optional string regex = 1 [json_name = "regex"];</code>
     * @param string $var
     * @return $this
     */
    public function setRegex($var)
    {
        GPBUtil::checkString($var, True);
        $this->regex = $var;

        return $this;
    }

    /**
     * Field value of integer strictly greater than this value.
     *
     * Generated from protobuf field <code>optional int64 int_gt = 2 [json_name = "intGt"];</code>
     * @return int|string
     */
    public function getIntGt()
    {
        return isset($this->int_gt) ? $this->int_gt : 0;
    }

    public function hasIntGt()
    {
        return isset($this->int_gt);
    }

    public function clearIntGt()
    {
        unset($this->int_gt);
    }

    /**
     * Field value of integer strictly greater than this value.
     *
     * Generated from protobuf field <code>optional int64 int_gt = 2 [json_name = "intGt"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setIntGt($var)
    {
        GPBUtil::checkInt64($var);
        $this->int_gt = $var;

        return $this;
    }

    /**
     * Field value of integer strictly smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 int_lt = 3 [json_name = "intLt"];</code>
     * @return int|string
     */
    public function getIntLt()
    {
        return isset($this->int_lt) ? $this->int_lt : 0;
    }

    public function hasIntLt()
    {
        return isset($this->int_lt);
    }

    public function clearIntLt()
    {
        unset($this->int_lt);
    }

    /**
     * Field value of integer strictly smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 int_lt = 3 [json_name = "intLt"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setIntLt($var)
    {
        GPBUtil::checkInt64($var);
        $this->int_lt = $var;

        return $this;
    }

    /**
     * Used for nested message types, requires that the message type exists.
     *
     * Generated from protobuf field <code>optional bool msg_exists = 4 [json_name = "msgExists"];</code>
     * @return bool
     */
    public function getMsgExists()
    {
        return isset($this->msg_exists) ? $this->msg_exists : false;
    }

    public function hasMsgExists()
    {
        return isset($this->msg_exists);
    }

    public function clearMsgExists()
    {
        unset($this->msg_exists);
    }

    /**
     * Used for nested message types, requires that the message type exists.
     *
     * Generated from protobuf field <code>optional bool msg_exists = 4 [json_name = "msgExists"];</code>
     * @param bool $var
     * @return $this
     */
    public function setMsgExists($var)
    {
        GPBUtil::checkBool($var);
        $this->msg_exists = $var;

        return $this;
    }

    /**
     * Human error specifies a user-customizable error that is visible to the user.
     *
     * Generated from protobuf field <code>optional string human_error = 5 [json_name = "humanError"];</code>
     * @return string
     */
    public function getHumanError()
    {
        return isset($this->human_error) ? $this->human_error : '';
    }

    public function hasHumanError()
    {
        return isset($this->human_error);
    }

    public function clearHumanError()
    {
        unset($this->human_error);
    }

    /**
     * Human error specifies a user-customizable error that is visible to the user.
     *
     * Generated from protobuf field <code>optional string human_error = 5 [json_name = "humanError"];</code>
     * @param string $var
     * @return $this
     */
    public function setHumanError($var)
    {
        GPBUtil::checkString($var, True);
        $this->human_error = $var;

        return $this;
    }

    /**
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_gt = 6 [json_name = "floatGt"];</code>
     * @return float
     */
    public function getFloatGt()
    {
        return isset($this->float_gt) ? $this->float_gt : 0.0;
    }

    public function hasFloatGt()
    {
        return isset($this->float_gt);
    }

    public function clearFloatGt()
    {
        unset($this->float_gt);
    }

    /**
     * Field value of double strictly greater than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_gt = 6 [json_name = "floatGt"];</code>
     * @param float $var
     * @return $this
     */
    public function setFloatGt($var)
    {
        GPBUtil::checkDouble($var);
        $this->float_gt = $var;

        return $this;
    }

    /**
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_lt = 7 [json_name = "floatLt"];</code>
     * @return float
     */
    public function getFloatLt()
    {
        return isset($this->float_lt) ? $this->float_lt : 0.0;
    }

    public function hasFloatLt()
    {
        return isset($this->float_lt);
    }

    public function clearFloatLt()
    {
        unset($this->float_lt);
    }

    /**
     * Field value of double strictly smaller than this value.
     * Note that this value can only take on a valid floating point
     * value. Use together with float_epsilon if you need something more specific.
     *
     * Generated from protobuf field <code>optional double float_lt = 7 [json_name = "floatLt"];</code>
     * @param float $var
     * @return $this
     */
    public function setFloatLt($var)
    {
        GPBUtil::checkDouble($var);
        $this->float_lt = $var;

        return $this;
    }

    /**
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     *
     * Generated from protobuf field <code>optional double float_epsilon = 8 [json_name = "floatEpsilon"];</code>
     * @return float
     */
    public function getFloatEpsilon()
    {
        return isset($this->float_epsilon) ? $this->float_epsilon : 0.0;
    }

    public function hasFloatEpsilon()
    {
        return isset($this->float_epsilon);
    }

    public function clearFloatEpsilon()
    {
        unset($this->float_epsilon);
    }

    /**
     * Field value of double describing the epsilon within which
     * any comparison should be considered to be true. For example,
     * when using float_gt = 0.35, using a float_epsilon of 0.05
     * would mean that any value above 0.30 is acceptable. It can be
     * thought of as a {float_value_condition} +- {float_epsilon}.
     * If unset, no correction for floating point inaccuracies in
     * comparisons will be attempted.
     *
     * Generated from protobuf field <code>optional double float_epsilon = 8 [json_name = "floatEpsilon"];</code>
     * @param float $var
     * @return $this
     */
    public function setFloatEpsilon($var)
    {
        GPBUtil::checkDouble($var);
        $this->float_epsilon = $var;

        return $this;
    }

    /**
     * Floating-point value compared to which the field content should be greater or equal.
     *
     * Generated from protobuf field <code>optional double float_gte = 9 [json_name = "floatGte"];</code>
     * @return float
     */
    public function getFloatGte()
    {
        return isset($this->float_gte) ? $this->float_gte : 0.0;
    }

    public function hasFloatGte()
    {
        return isset($this->float_gte);
    }

    public function clearFloatGte()
    {
        unset($this->float_gte);
    }

    /**
     * Floating-point value compared to which the field content should be greater or equal.
     *
     * Generated from protobuf field <code>optional double float_gte = 9 [json_name = "floatGte"];</code>
     * @param float $var
     * @return $this
     */
    public function setFloatGte($var)
    {
        GPBUtil::checkDouble($var);
        $this->float_gte = $var;

        return $this;
    }

    /**
     * Floating-point value compared to which the field content should be smaller or equal.
     *
     * Generated from protobuf field <code>optional double float_lte = 10 [json_name = "floatLte"];</code>
     * @return float
     */
    public function getFloatLte()
    {
        return isset($this->float_lte) ? $this->float_lte : 0.0;
    }

    public function hasFloatLte()
    {
        return isset($this->float_lte);
    }

    public function clearFloatLte()
    {
        unset($this->float_lte);
    }

    /**
     * Floating-point value compared to which the field content should be smaller or equal.
     *
     * Generated from protobuf field <code>optional double float_lte = 10 [json_name = "floatLte"];</code>
     * @param float $var
     * @return $this
     */
    public function setFloatLte($var)
    {
        GPBUtil::checkDouble($var);
        $this->float_lte = $var;

        return $this;
    }

    /**
     * Used for string fields, requires the string to be not empty (i.e different from "").
     *
     * Generated from protobuf field <code>optional bool string_not_empty = 11 [json_name = "stringNotEmpty"];</code>
     * @return bool
     */
    public function getStringNotEmpty()
    {
        return isset($this->string_not_empty) ? $this->string_not_empty : false;
    }

    public function hasStringNotEmpty()
    {
        return isset($this->string_not_empty);
    }

    public function clearStringNotEmpty()
    {
        unset($this->string_not_empty);
    }

    /**
     * Used for string fields, requires the string to be not empty (i.e different from "").
     *
     * Generated from protobuf field <code>optional bool string_not_empty = 11 [json_name = "stringNotEmpty"];</code>
     * @param bool $var
     * @return $this
     */
    public function setStringNotEmpty($var)
    {
        GPBUtil::checkBool($var);
        $this->string_not_empty = $var;

        return $this;
    }

    /**
     * Repeated field with at least this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_min = 12 [json_name = "repeatedCountMin"];</code>
     * @return int|string
     */
    public function getRepeatedCountMin()
    {
        return isset($this->repeated_count_min) ? $this->repeated_count_min : 0;
    }

    public function hasRepeatedCountMin()
    {
        return isset($this->repeated_count_min);
    }

    public function clearRepeatedCountMin()
    {
        unset($this->repeated_count_min);
    }

    /**
     * Repeated field with at least this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_min = 12 [json_name = "repeatedCountMin"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setRepeatedCountMin($var)
    {
        GPBUtil::checkInt64($var);
        $this->repeated_count_min = $var;

        return $this;
    }

    /**
     * Repeated field with at most this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_max = 13 [json_name = "repeatedCountMax"];</code>
     * @return int|string
     */
    public function getRepeatedCountMax()
    {
        return isset($this->repeated_count_max) ? $this->repeated_count_max : 0;
    }

    public function hasRepeatedCountMax()
    {
        return isset($this->repeated_count_max);
    }

    public function clearRepeatedCountMax()
    {
        unset($this->repeated_count_max);
    }

    /**
     * Repeated field with at most this number of elements.
     *
     * Generated from protobuf field <code>optional int64 repeated_count_max = 13 [json_name = "repeatedCountMax"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setRepeatedCountMax($var)
    {
        GPBUtil::checkInt64($var);
        $this->repeated_count_max = $var;

        return $this;
    }

    /**
     * Field value of length greater than this value.
     *
     * Generated from protobuf field <code>optional int64 length_gt = 14 [json_name = "lengthGt"];</code>
     * @return int|string
     */
    public function getLengthGt()
    {
        return isset($this->length_gt) ? $this->length_gt : 0;
    }

    public function hasLengthGt()
    {
        return isset($this->length_gt);
    }

    public function clearLengthGt()
    {
        unset($this->length_gt);
    }

    /**
     * Field value of length greater than this value.
     *
     * Generated from protobuf field <code>optional int64 length_gt = 14 [json_name = "lengthGt"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setLengthGt($var)
    {
        GPBUtil::checkInt64($var);
        $this->length_gt = $var;

        return $this;
    }

    /**
     * Field value of length smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 length_lt = 15 [json_name = "lengthLt"];</code>
     * @return int|string
     */
    public function getLengthLt()
    {
        return isset($this->length_lt) ? $this->length_lt : 0;
    }

    public function hasLengthLt()
    {
        return isset($this->length_lt);
    }

    public function clearLengthLt()
    {
        unset($this->length_lt);
    }

    /**
     * Field value of length smaller than this value.
     *
     * Generated from protobuf field <code>optional int64 length_lt = 15 [json_name = "lengthLt"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setLengthLt($var)
    {
        GPBUtil::checkInt64($var);
        $this->length_lt = $var;

        return $this;
    }

    /**
     * Field value of length strictly equal to this value.
     *
     * Generated from protobuf field <code>optional int64 length_eq = 16 [json_name = "lengthEq"];</code>
     * @return int|string
     */
    public function getLengthEq()
    {
        return isset($this->length_eq) ? $this->length_eq : 0;
    }

    public function hasLengthEq()
    {
        return isset($this->length_eq);
    }

    public function clearLengthEq()
    {
        unset($this->length_eq);
    }

    /**
     * Field value of length strictly equal to this value.
     *
     * Generated from protobuf field <code>optional int64 length_eq = 16 [json_name = "lengthEq"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setLengthEq($var)
    {
        GPBUtil::checkInt64($var);
        $this->length_eq = $var;

        return $this;
    }

    /**
     * Requires that the value is in the enum.
     *
     * Generated from protobuf field <code>optional bool is_in_enum = 17 [json_name = "isInEnum"];</code>
     * @return bool
     */
    public function getIsInEnum()
    {
        return isset($this->is_in_enum) ? $this->is_in_enum : false;
    }

    public function hasIsInEnum()
    {
        return isset($this->is_in_enum);
    }

    public function clearIsInEnum()
    {
        unset($this->is_in_enum);
    }

    /**
     * Requires that the value is in the enum.
     *
     * Generated from protobuf field <code>optional bool is_in_enum = 17 [json_name = "isInEnum"];</code>
     * @param bool $var
     * @return $this
     */
    public function setIsInEnum($var)
    {
        GPBUtil::checkBool($var);
        $this->is_in_enum = $var;

        return $this;
    }

    /**
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     *
     * Generated from protobuf field <code>optional int32 uuid_ver = 18 [json_name = "uuidVer"];</code>
     * @return int
     */
    public function getUuidVer()
    {
        return isset($this->uuid_ver) ? $this->uuid_ver : 0;
    }

    public function hasUuidVer()
    {
        return isset($this->uuid_ver);
    }

    public function clearUuidVer()
    {
        unset($this->uuid_ver);
    }

    /**
     * Ensures that a string value is in UUID format.
     * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
     * If uuid_ver is 0 all UUID versions are accepted.
     *
     * Generated from protobuf field <code>optional int32 uuid_ver = 18 [json_name = "uuidVer"];</code>
     * @param int $var
     * @return $this
     */
    public function setUuidVer($var)
    {
        GPBUtil::checkInt32($var);
        $this->uuid_ver = $var;

        return $this;
    }

}

